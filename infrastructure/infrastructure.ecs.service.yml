Description: >
  "Contrast Security - Creating Service For Task Defination"

Parameters:  
  ServiceName:
    Description: Service Name
    Type: String
    Default: "CS-Service"
  Environment:
    Description: "Define Environment"
    Type: String
    Default: "Dev"
  DesiredCount:
    Description: "Desired Count"
    Type: String
    Default: 1

Resources: 
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
          - "" 
          -
            - !Ref Environment
            - "-"
            - !Ref ServiceName

  ApplicationService:
      Type: AWS::ECS::Service
      DependsOn: ApplicationLoadBalancerListenerRule
      Properties:
        ServiceName: !Ref 'ServiceName'
        Cluster: !ImportValue ECSFargateCluster
        LaunchType: FARGATE
        DeploymentConfiguration:
          MaximumPercent: 200
          MinimumHealthyPercent: 75
        DesiredCount: !Ref 'DesiredCount'
        DeploymentController: ECS
        NetworkConfiguration:
          AwsvpcConfiguration:
            AssignPublicIp: ENABLED
            SecurityGroups:
              - !ImportValue ContainerSecurityGroup
            Subnets:
              - !ImportValue PrivateSubnet1
        TaskDefinition: !ImportValue ApplicationTaskDefination
        LoadBalancers:
           - ContainerName: !ImportValue 'TaskDefinitionName'
             ContainerPort: 80
             TargetGroupArn: !Ref 'ApplicationTargetGroup'  
        Tags:
        - Key: "Name"
          Value: !Join
              - ""
              -  
                - !Ref Environment
                - "-"
                - !Ref ServiceName

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
        - !ImportValue PublicSubnet1
        - !ImportValue PublicSubnet2
      SecurityGroups: 
        - !ImportValue ApplicationLoadBalancerSecurityGroup

  ApplicationTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Ref 'ServiceName'
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !ImportValue VpcId

  ApplicationLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - ApplicationLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'ApplicationTargetGroup'
          Type: 'forward'
      LoadBalancerArn: !Ref 'ApplicationLoadBalancer'
      Port: 80
      Protocol: HTTP    

  ApplicationLoadBalancerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'ApplicationTargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: ['*']
      ListenerArn: !Ref ApplicationLoadBalancerListener
      Priority: 1     
